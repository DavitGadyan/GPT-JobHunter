"""
Perform job analysis on LinkedIn.

This module imports functions from other modules, including search_jobs,
extract_text_from_site, and text_similarity, to search for jobs on LinkedIn,
extract job descriptions from job URLs, and calculate the similarity between a
given resume text and a job description.

The main function jobs_analysis takes a search term and a location as inputs
and returns a list of dictionaries, each containing a job's title, URL,
description, and resume similarity score. The module also includes a main
function that allows the user to input a search term and location through
command-line arguments.
"""

import time
import logging
import re
import json
import datetime
import argparse
import pprint
import yaml
import boto3
import os
import sqlite3
from utils.search_linkedin_jobs import search_linkedin_jobs

pp = pprint.PrettyPrinter(indent=4)
logging.basicConfig(level=logging.DEBUG)

def save_raw_data(data, source):
    """
    Saves a list of dictionaries to a JSON file locally in the ../data/raw directory.
    """
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S-%f")
    file_path = os.path.join("..", "data", "raw", f"{source}-{timestamp}.json")
    with open(file_path, "w") as f:
        json.dump(data, f)
    logging.info("Saved data to %s", file_path)
    return None

def get_all_jobs(search_term, location, pages):
    all_jobs = []
    for page in range(0,pages):
        jobs = search_linkedin_jobs(
                search_term=search_term, location=location, page=page
                )
        all_jobs.append(jobs)
    return all_jobs

def save_all_jobs(search_term, location, pages):
    jobs = get_all_jobs(search_term=search_term, location=location, pages=pages)
    for job in jobs:
        for item in job:
            save_raw_data(item)


save_all_jobs(search_term="Head of Data Science", location=remote, pages=1)